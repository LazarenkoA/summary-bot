package giga

import (
	"context"
	"fmt"
	"github.com/paulrzcz/go-gigachat"
	"github.com/pkg/errors"
)

//go:generate mockgen -source=$GOFILE -destination=./mock/mock.go
type IGigaClient interface {
	AuthWithContext(ctx context.Context) error
	ChatWithContext(ctx context.Context, in *gigachat.ChatRequest) (*gigachat.ChatResponse, error)
}

type Client struct {
	ctx    context.Context
	client IGigaClient
}

func NewGigaClient(ctx context.Context, authKey string) (*Client, error) {
	client, err := gigachat.NewInsecureClientWithAuthKey(authKey)
	if err != nil {
		return nil, errors.Wrap(err, "newGigaClient error")
	}

	return &Client{
		ctx:    ctx,
		client: client,
	}, nil
}

func (c *Client) GetSummary(text string) (string, error) {
	err := c.client.AuthWithContext(c.ctx)
	if err != nil {
		return "", errors.Wrap(err, "auth error")
	}

	if text == "" {
		return "", errors.New("message is not defined")
	}

	req := &gigachat.ChatRequest{
		Model:  "GigaChat",
		Stream: ptr(false),
		Messages: []gigachat.Message{
			{
				Role:    "system",
				Content: "–¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –ø–µ—Ä–µ–ø–∏—Å–∫—É –ª—é–¥–µ–π –≤ —á–∞—Ç–µ.",
			},
			{
				Role:    "user",
				Content: c.prompt(),
			},
		},
	}

	resp, err := c.client.ChatWithContext(c.ctx, req)
	if err != nil {
		return "", errors.Wrap(err, "request error")
	}

	if len(resp.Choices) == 0 {
		return "", errors.New("response does not contain data")
	}

	return resp.Choices[0].Message.Content, nil
}

func (c *Client) prompt() string {
	return fmt.Sprintf(`–ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π messageID, –∏–º—è –∞–≤—Ç–æ—Ä–∞ –∏ —Ç–µ–∫—Å—Ç. –¢–∞–±—É–ª—è—Ü–∏—è (\t) –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å —Ç—Ä–µ–¥–æ–≤).
–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
–í—ã–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–∏ –≤ —á–∞—Ç–µ. –î–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã:
–î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—É—Ç–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è.
–£–∫–∞–∂–∏ messageID, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç–µ–º–∞ –Ω–∞—á–∞–ª–∞—Å—å (root_message_id).
–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: JSON:
{
  "topics": [
    {
      "topic": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã",
      "root_message_id": "ID —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–∫—É–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å —Ç–µ–º–∞"
    },
    ...
  ]
}
üîπ –ò–≥–Ω–æ—Ä–∏—Ä—É–π —Ñ—Ä–∞–∑—ã –≤–Ω–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (—à—É—Ç–∫–∏, –º–µ–∂–¥–æ–º–µ—Ç–∏—è –∏ –ø—Ä.), –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–µ–º—É.
üîπ –ï—Å–ª–∏ –≤–µ—Ç–∫–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∏–¥—É—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, —Å—á–∏—Ç–∞–µ–º –∏—Ö —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏.
üîπ –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π.
üîπ –ù–µ –≤—ã–≤–æ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∞–≤—Ç–æ—Ä–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ ‚Äî —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã –∏ ID, –≥–¥–µ –æ–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å.
`)
}

func ptr[T any](v T) *T {
	return &v
}
